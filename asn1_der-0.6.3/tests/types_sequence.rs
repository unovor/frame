extern crate asn1_der;
use ::asn1_der::{ Asn1DerError, DerObject, IntoDerObject, FromDerObject };


#[test]
fn test_ok() {
	fn test((bytes, sequence): &(&[u8], Vec<DerObject>)) {
		// Test deserialization
		let deserialized = Vec::<DerObject>::deserialize(bytes.iter()).unwrap();
		assert_eq!(sequence, &deserialized);
		
		// Test length prediction
		assert_eq!(deserialized.serialized_len(), bytes.len());
		
		// Test serialization
		let mut target = vec![0u8; bytes.len()];
		deserialized.serialize(target.iter_mut()).unwrap();
		assert_eq!(*bytes, target.as_slice());
	}
	
	[
		(b"\x30\x00".as_ref(), vec![]),
		(b"\x30\x04\x04\x02\x37\xe4".as_ref(), vec![DerObject::from_raw(0x04, b"\x37\xe4".to_vec())]),
		(b"\x30\x81\x87\x04\x02\x37\xe4\x04\x81\x80\x72\x33\x0e\x8d\xb9\x1b\x33\x21\x5c\x0e\x53\x3f\xd2\x8e\x34\xcc\x8b\x09\xa8\x08\x87\x7d\xc7\xd8\x27\x41\x93\x04\x31\xbd\x09\xd0\xd6\xf3\x1a\x68\x7d\x40\x60\x12\x6f\x0c\xe0\x36\x0a\xcf\x95\xde\x81\x2f\xa4\x2f\x62\xf6\x71\x97\xe0\x49\x60\x3b\x65\x74\x8f\xd2\x57\xe3\xc1\x61\x1d\xb4\x54\xa4\x96\xa6\xb3\xf4\x3b\x27\xaa\x5a\xeb\xc9\x23\x58\x92\x1b\x27\x54\x79\xe6\x7c\xb1\x79\x83\x00\x5b\x08\x5b\x85\x2f\x0c\x2f\x8d\x34\x47\x2c\xa4\x70\xdf\xb0\xa3\x9b\x61\x33\x6d\xd3\x91\x84\x81\x97\x68\x67\x54\xb2\xee\x57\xfd\x84".as_ref(), vec![DerObject::from_raw(0x04, b"\x37\xe4".to_vec()), DerObject::from_raw(0x04, b"\x72\x33\x0e\x8d\xb9\x1b\x33\x21\x5c\x0e\x53\x3f\xd2\x8e\x34\xcc\x8b\x09\xa8\x08\x87\x7d\xc7\xd8\x27\x41\x93\x04\x31\xbd\x09\xd0\xd6\xf3\x1a\x68\x7d\x40\x60\x12\x6f\x0c\xe0\x36\x0a\xcf\x95\xde\x81\x2f\xa4\x2f\x62\xf6\x71\x97\xe0\x49\x60\x3b\x65\x74\x8f\xd2\x57\xe3\xc1\x61\x1d\xb4\x54\xa4\x96\xa6\xb3\xf4\x3b\x27\xaa\x5a\xeb\xc9\x23\x58\x92\x1b\x27\x54\x79\xe6\x7c\xb1\x79\x83\x00\x5b\x08\x5b\x85\x2f\x0c\x2f\x8d\x34\x47\x2c\xa4\x70\xdf\xb0\xa3\x9b\x61\x33\x6d\xd3\x91\x84\x81\x97\x68\x67\x54\xb2\xee\x57\xfd\x84".to_vec())])
	].iter().for_each(test);
}


#[test]
fn test_err() {
	fn test((bytes, error): &(&[u8], Asn1DerError)) {
		assert_eq!(Vec::<DerObject>::deserialize(bytes.iter()).unwrap_err(), *error);
	}
	
	[
		// Invalid tag
		(b"\x31\x00".as_ref(), Asn1DerError::InvalidTag),
		// Not enough bytes in sub-object
		(b"\x30\x03\x02\x02\x80", Asn1DerError::LengthMismatch),
		// Not enough bytes in object
		(b"\x30\x05\x04\x02\x37\xe4".as_ref(), Asn1DerError::LengthMismatch)
	].iter().for_each(test);
}